{"version":3,"sources":["Helpers/ReturnStuffs.js","Components/QuoteBox.jsx","Constatnts/constants.js","Containers/QuoteBoxContainer.js","Actions/index.js","App.js","Assets/repo.js","Reducers/fetchReducer.js","Reducers/changeReducer.js","Reducers/rootReducer.js","store.js","index.js"],"names":["randomInd","length","Math","floor","random","QuoteBox","props","handleClick","bind","this","fetchItems","changeItems","quotesArr","colorArr","ind","quote","author","color","id","className","style","backgroundColor","onClick","href","target","React","Component","CHANGE_ASKED","FETCH_SUCCEEDED","FETCH_FAILED","connect","state","fetchReducer","message","error","dispatch","axios","get","then","res","type","payload","data","quotes","catch","err","quoteArray","colArray","App","colors","initState","action","quotesArr1","ind1","randObj1","colArr","curCol","quotesArr2","ind2","randObj2","colArr2","curCol2","init","styles","changeReducer","combineReducers","store","createStore","rootReducer","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e15141d3.chunk.js","sourcesContent":["export let randomInd =(length) =>{\r\n    return Math.floor(Math.floor(Math.random() * length))\r\n};","\r\nimport React from 'react';\r\nimport { randomInd } from '../Helpers/ReturnStuffs';\r\nclass QuoteBox extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.handleClick = this.handleClick.bind(this);\r\n\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.props.fetchItems();\r\n\r\n    };\r\n    handleClick() {\r\n        \r\n        this.props.changeItems(this.props.quotesArr, this.props.colorArr);\r\n    };\r\n    render () {\r\n        let twitterLink = \"https://twitter.com/intent/tweet?hashtags=quotes&related=freecodecamp&text=\"\r\n        let ind = randomInd(this.props.quotesArr.length);\r\n        let { quote, author} = this.props.quotesArr[ind];\r\n        let { color } = this.props;\r\n        return(\r\n            <div id=\"quote-box\" className=\"quote-boxe\">\r\n                <div className='content' style={{backgroundColor : color}}>\r\n                    <div id=\"text\" className=\"quote\">{`\"${quote}\"`}</div>\r\n                    <div id=\"author\" className=\"author\" >{`--- ${author} ---`}</div>\r\n                </div>\r\n                <div className=\"controls\">\r\n                    <button id=\"new-quote\" onClick={this.handleClick} className=\"new-quote\"><i className=\"fas fa-forward\"></i> New Qote</button>\r\n                    <div className='tweet'><a id=\"tweet-quote\" href={`${twitterLink + quote + author}`} target=\"_blank\">{<i className=\"fab fa-twitter\"></i> }tweet this quote</a></div>\r\n                </div>\r\n            </div>\r\n        )\r\n    };\r\n};\r\nexport default QuoteBox\r\n","export const CHANGE_ASKED = \"CHANGE_ASKED\";\r\nexport const FETCH_SUCCEEDED = \"FETCH_SUCCEEDED\";\r\nexport const FETCH_FAILED = \"FETCH_FAILED\";\r\n//export const DEFAULT_QUOTE = \"DEFAULT_QUOTE\"","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport QuoteBox from '../Components/QuoteBox';\r\nimport  apiCall, { /*newItems*/ }  from '../Actions/index'\r\nimport { CHANGE_ASKED } from '../Constatnts/constants';\r\n\r\nexport class QuoteBoxContainer extends React.Component {\r\n    render() {\r\n        return (\r\n            <QuoteBox />\r\n        )\r\n    }\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        quote :state.fetchReducer.quote,/*: randArr.quote,*/\r\n        author : state.fetchReducer.author,/*: randArr.author    */\r\n        quotesArr : state.fetchReducer.quotesArr,\r\n        message : state.fetchReducer.message,\r\n        error : state.fetchReducer.error,\r\n        colorArr : state.fetchReducer.colorArr,\r\n        color : state.fetchReducer.color\r\n\r\n    };\r\n};\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return{\r\n        //newQuote : (array, index) => {dispatch(changeItems(array, index))}\r\n        fetchItems : ()=>{\r\n            dispatch(apiCall())\r\n        },\r\n        changeItems : (quoteArray, colArray) =>{\r\n            dispatch({type : CHANGE_ASKED, payload : {quoteArray, colArray}})\r\n        }\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(QuoteBox);","import axios from \"axios\";\r\nimport { /*DEFAULT_QUOTE, CHANGE_ASKED,*/ FETCH_SUCCEEDED, FETCH_FAILED } from '../Constatnts/constants';\r\n//import { randomInd } from \"../Helpers/ReturnStuffs\";\r\n\r\n/*\r\nexport  function newItems (arr){\r\n    let ind = arr.length\r\n    let randObj = arr[randomInd(ind)];\r\n    return {\r\n        type : CHANGE_ASKED,\r\n        payload :{\r\n            quote : randObj.quote ,\r\n            author : randObj.author ,\r\n        }\r\n        payload : randObj \r\n\r\n    }\r\n\r\n};\r\n*/\r\n\r\n\r\nlet url = 'https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json'\r\n\r\nexport default function apiCall (){\r\n    return (dispatch) => {\r\n        return axios.get(url)\r\n            .then (res =>{\r\n                dispatch({\r\n                    type : FETCH_SUCCEEDED,\r\n                    payload : res.data.quotes\r\n                })\r\n            })\r\n            /*.then(res =>{\r\n                let array= res.data.quotes\r\n                dispatch(newItems(array))\r\n            })*/\r\n            .catch(err =>{\r\n                dispatch({\r\n                    type : FETCH_FAILED,\r\n                    payload : err\r\n                })\r\n            })\r\n    };\r\n};\r\n\r\n\r\n","import QuoteBoxContainer from './Containers/QuoteBoxContainer';\n//import QuoteBox from './Components/QuoteBox';\nimport './Styles/mainStyles/App.css'\nfunction App() {\n  return (\n    <div className=\"App app-cont\">\n      {/*<QuoteBox />*/}\n      <QuoteBoxContainer />\n    </div>\n  );\n}\n\n\n\n\nexport default App;\n//console.clear()\n\n\n\n\n","export let  colors = [\n    '#16a085',\n    '#27ae60',\n    '#2c3e50',\n    '#f39c12',\n    '#e74c3c',\n    '#9b59b6',\n    '#FB6964',\n    '#342224',\n    '#472E32',\n    /*'#BDBB99',*/\n    '#77B1A9',\n    '#73A857'\n  ];","import { CHANGE_ASKED, FETCH_FAILED, FETCH_SUCCEEDED } from '../Constatnts/constants';\r\nimport { randomInd } from \"../Helpers/ReturnStuffs\";\r\nimport { colors } from \"../Assets/repo\"\r\n\r\nlet initState = {\r\n    quotesArr : [{quote : \"j'obtiens toujours tout ce que je desire\",\r\n    author : \"Persévérance NSILOU\",}],\r\n    message : \"\",\r\n    error : \"\",\r\n    colorArr : [],\r\n    color : colors[randomInd(colors.length)],\r\n};\r\n\r\n\r\n\r\n\r\nlet fetchReducer = (state = initState, action) =>{\r\n    switch(action.type) {\r\n        case FETCH_SUCCEEDED :\r\n            let quotesArr1 = action.payload;\r\n            let ind1 = quotesArr1.length;\r\n            let randObj1 = quotesArr1[randomInd(ind1)];\r\n            let colArr = colors;\r\n            let curCol = colArr[randomInd(colArr.length)]\r\n            return {\r\n                ...state,\r\n                quotesArr : quotesArr1,\r\n                colorArr : colArr,\r\n                message : \"Fetch Succeded\",\r\n                quote : randObj1.quote,\r\n                author : randObj1.author,\r\n                color : curCol\r\n            };\r\n        case FETCH_FAILED : \r\n            let err = action.payload;\r\n            return {\r\n                ...state,\r\n                message : \"Sorry, we encountered a problem, please check your API, lol !!!\",\r\n                error : err\r\n            };\r\n        case CHANGE_ASKED :\r\n            let quotesArr2 = action.payload.quoteArray;\r\n            let ind2 = quotesArr2.length;\r\n            let randObj2 = quotesArr2[randomInd(ind2)];\r\n            let colArr2 = action.payload.colArray;\r\n            let curCol2 = colArr2[randomInd(colArr2.length)]\r\n            return {\r\n                ...state,\r\n                quotesArr : quotesArr2,\r\n                quote : randObj2.quote,\r\n                author : randObj2.author,\r\n                colorArr : colArr2,\r\n                color : curCol2\r\n            }\r\n    default :\r\n        return state;\r\n    };\r\n};\r\n\r\nexport default fetchReducer;\r\n\r\n","import  { changeItems }  from \"../Actions/index\";\nimport { randomInd } from  \"../Helpers/ReturnStuffs\"\nimport {  CHANGE_ASKED } from '../Constatnts/constants';\nlet init = {\n        quote : \"\" ,\n        author : \"\",\n        styles : [],\n};\nlet changeReducer = (state = init, action) => {\n    switch(action) {\n        case CHANGE_ASKED : \n            return {\n                ...state,\n                ...action.payload\n            }\n        default :\n            return state\n    \n    };\n};\n\nexport default changeReducer();","import { combineReducers } from \"redux\";\r\nimport fetchReducer from './fetchReducer';\r\nimport changeReducer from \"./changeReducer\";\r\n\r\n/*\r\nlet combined = combineReducers({\r\n    quoteReducer, \r\n});\r\n*/\r\nexport default combineReducers({ fetchReducer, changeReducer});\r\n\r\n","import { createStore, applyMiddleware } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport rootReducer from \"./Reducers/rootReducer\";\r\n\r\nlet store = createStore(rootReducer, applyMiddleware(thunk));\r\nexport default store;\r\n\r\n\r\n/*\r\nI HAVE TO USE  THE PRELOAD METHOD IN COMBINE REDUCERS TO SET INITIAL STATE OF THE FIRST LOAD\r\n LIKE THIS \r\nAS TAUGHT IN THIS WEB-PAGE :\r\n    https://redux.js.org/usage/structuring-reducers/initializing-state\r\n*/","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport store from './store'\n//import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n\n//reportWebVitals();\n"],"sourceRoot":""}